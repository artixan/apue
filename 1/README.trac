= 1 概論 =

OSX 10.6.8 にて実行しています。
1.1, 1.2, 1.12 は飛ばします。

== 1.3 ファイルとディレクトリ ==

 * ファイル名に使えない文字はスラッシュ(/)とnull文字のみ
 * ls(1) を見るには man 1 ls する

ところで man(1) で見れるセクション(ここでは1とか)については次のような取り決めがある。

 Section 1::
   コマンドアプリケーションの説明
 Section 2::
   システムコールの説明
 Section 3::
   ライブラリルーチンの説明
 Section 4::
   デバイスドライバの説明
 Section 5::
   ファイルに対する説明
 Section 6:: 
   ゲームに対する説明
 Section 7::
   共有ファイル(share)に関する説明
 Section 8::
   システム管理に関する説明

この輪講を通じてお世話になるセクションのほどんどは2, 3だと思われる。

コードに移る前に、[http://www.apuebook.com/index.html Advanced Programming in the UNIX® Environment, Second Edition] にある Source Code の配置を参考にしつつ、自分は以下のようなディレクトリ構成で進める事にした。(といいつつ APUE のディレクトリ構造にいずれ変えるかもしれない、ソースコードの名前はなるべく踏襲している)

{{{
$ tree
.
├── 1
│   ├── Makefile
│   ├── README.trac
│   └── myls.c
├── include
│   └── error.h
└── lib
    └── error.c
}}}

[https://github.com/zigorou/apue/blob/master/lib/error.c error.c], [https://github.com/zigorou/apue/blob/master/lib/error.h error.h] では頻出するエラー発生時のメッセージ表示及び exit(3) を行う関数群が入っている。これは UNIX Network Programming より拝借して適当に書き直したものである。

ここで「プログラム1.1 ディレクトリ内のすべてのファイルをリストする」を [https://github.com/zigorou/apue/blob/master/1/myls.c 1/myls.c] として示す。

{{{
#!c
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <dirent.h>

#include "error.h"

int main(int argc, char **argv) {
    DIR *dp;
    struct dirent *dirp;
    
    if (argc != 2)
        err_quit("a single argument (the directory name) is required");

    if ( ( dp = opendir(argv[1]) ) == NULL )
        err_sys("can't open %s", argv[1]);

    while (( dirp = readdir(dp) ) != NULL)
        printf("%s\n", dirp->d_name);

    closedir(dp);

    exit(0);
}
}}}

少し脱線すると、利用する標準関数として opendir(3), readdir(3), closedir(3) があり、
これらを man 3 opendir 等すると dirent.h を include しなければならないのは容易に分かる。
その他に exit(3) を使うので stdlib.h を include し、さらに NULL は stddef.h で定義されている。

ディレクトリ内部を列挙するに辺り行う操作の手順は、

 1. opendir(3) で DIR ポインタを生成
 2. readdir(3) で DIR ポインタを元に NULL が返るまで dirent 構造体ポインタを取得する
 3. dirent 構造体ポインタを参照
 4. closedir(3) によって DIR ポインタを閉じる

という一連の操作になる。

{{{
#!c
#include <dirent.h>
DIR * opendir(const char *dirname);
struct dirent *readdir(DIR *dirp);
int closedir(DIR *dirp);
}}}

man 3 opendir より、

  The opendir() function opens the directory named by dirname, associates a directory stream with it, 
  and returns a pointer to be used to identify the directory stream in subsequent operations. 
  The pointer NULL is returned if dirname cannot be accessed or if it cannot malloc(3) enough memory to hold the whole thing.

とあるように、opendir(3) は dirname にアクセス出来なかったり十分なメモリが確保できない際に NULL ポインタを返す。一方で readdir(3) は、

  The readdir() function returns a pointer to the next directory entry. 
  It returns NULL upon reaching the end of the directory or detecting an invalid seekdir() operation.

とあるので、NULL ポインタが返ってくるまで dirent 構造体のポインタが返ってくる事が分かる。

== 1.4 入力と出力 ==

 ファイル記述子 (file descriptor)::
   プロセスが参照するファイル等を識別するためにカーネルが使用する非負の整数。カーネルがファイルを開いたり作ったりする度に、ファイル記述子を返す。
 アンバッファド入出力::
   open(2), read(2), write(2), lseek(2), close(2) といったシステムコールは、バッファリングしない入出力機能を提供する。これらの関数はファイル記述子を通して用いられる。

次に「プログラム1.2 標準入力から標準出力へのコピー」を [https://github.com/zigorou/apue/blob/master/1/mycat.c 1/mycat.c] として以下に示す。

{{{
#!c
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <unistd.h>

#include "error.h"

#define BUFFSIZE 8192

int main(int argc, char **argv) {
    int n;
    char buf[BUFFSIZE];

    while ( ( n = read(STDIN_FILENO, buf, BUFFSIZE) ) > 0 ) {
        if (write(STDOUT_FILENO, buf, n) != n)
            err_sys("write error");
    }
    
    if ( n < 0 )
        err_sys("read error");

    exit(0);
}
}}}

STDIN_FILENO, STDOUT_FILENO は unistd.h で定義されている。read(2), write(2) に伴うヘッダファイルの include は man を参照の事。

{{{
#!c
#include <unistd.h>
ssize_t read(int fildes, void *buf, size_t nbyte);
ssize_t write(int fildes, const void *buf, size_t nbyte);
}}}

man 2 read すると、

    RETURN VALUES
         If successful, the number of bytes actually read is returned.
         Upon reading end-of-file, zero is returned.
         Otherwise, a -1 is returned and the global variable errno is set to indicate the error.

とある。つまり、通常は読み込めたバイト数を返す。0 が返ってきた場合は EOF であり、-1 が返ってきた場合は何らかのエラーが返ってきており、詳細は errno というグローバル変数にエラーコードが設定されている。詳細なエラーは man に書いてある。

次に man 2 write する。

    RETURN VALUES
         Upon successful completion the number of bytes which were written is returned.
         Otherwise, a -1 is returned and the global variable errno is set to indicate the error.

書き込めたバイト数が通常は返され、-1 が返ってきたときはエラーであるという点は read(2) と同じインターフェースである。

 標準入出力関数::
   read(2), write(2) のようなアンバッファド入出力関数ではなく、バッファリングする関数の事。stdio.h で提供されている。
   fgets(3), getc(3), putc(3) のような関数がそれに該当する。

次に「プログラム1.3 標準入出力関数を用いた標準入力から標準出力へのコピー」を [https://github.com/zigorou/apue/blob/master/1/getcputc.c 1/getcputc.c] に示す。

{{{
#!c
#include <stdio.h>
#include <stdlib.h>

#include "error.h"

int main(int argc, char **argv) {
    int c;

    while ( ( c = getc(stdin) ) != EOF ) {
        if ( putc(c, stdout) == EOF )
            err_sys("output error");
    }

    if (ferror(stdin))
        err_sys("input error");

    exit(0);
}
}}}

{{{
#!c
#include <stdio.h>
int getc(FILE *stream);
int putc(int c, FILE *stream);
int ferror(FILE *stream);
}}}

まずは man 3 getc より、

    RETURN VALUES
        If successful, these routines return the next requested object from the stream. 
        Character values are returned as an unsigned char converted to an int.
        If the stream is at end-of-file or a read error occurs, the routines return EOF. 
        The routines feof(3) and ferror(3) must be used to distinguish between end-of-file and error. 
        If an error occurs, the global variable errno is set to indicate the error. 
        The end-of-file condition is remembered, even on a terminal, 
        and all subsequent attempts to read will return EOF until the condition is cleared with clearerr(3).

通常は読み込んだ 1 byte の unsigned char を int にコンバートした物が返される。ファイルの終端またはエラーが発生した場合は EOF が返される。
(つまり EOF は本当の意味での EOF ではなく、エラーが発生している場合もある)
従って、このサンプルコードにあるように getc(3) で EOF が発生した後に ferror(3) により検査する必要がある。

次に man 3 putc を見る。

    RETURN VALUES
         The functions, fputc(), putc(), putchar(), putc_unlocked(), and putchar_unlocked() return the character written.
         If an error occurs, the value EOF is returned.
         The putw() function returns 0 on success; EOF is returned if a write error occurs, or if an attempt is made to write a read-only stream.

書き込んだ char が戻ってくるが、EOF が返ってきたらエラーである。

== 1.5 プログラムとプロセス ==

 プロセスとプロセスID::
   プログラムの実行中のインスタンスをプロセスと呼ぶ。
   プロセスにはプロセスIDという一意な値が割り当てられる。この値は非負の整数である。

「プログラム1.4 プロセスIDの出力」を [https://github.com/zigorou/apue/blob/master/1/hello.c 1/hello.c] に示す。

{{{
#!c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(void) {
    printf("hello world from process ID %d\n", getpid());
    exit(0);
}
}}}

man 2 getpid すると、

{{{
#!c
#include <unistd.h>
pid_t getpid(void);
}}}

という定義である。

    DESCRIPTION
         Getpid() returns the process ID of the calling process.  The ID is guaranteed to be unique and is useful for constructing temporary file names.
         Getppid() returns the process ID of the parent of the calling process.
    ERRORS
         The getpid() and getppid() functions are always successful, and no return value is reserved to indicate an error.

引用して読めばそのままなので特に解説しない。

 プロセス制御::
   プログラムを制御するための重要なシステムコールとして fork(2), exec(3), waitpid(2) がある。

「プログラム1.5 標準入力からコマンドを読み込み実行する」を [https://github.com/zigorou/apue/blob/master/1/shell1.c 1/shell1.c] に示す。

{{{
#!c
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#include "error.h"

#define MAXLINE 4096

int main(void) {
    char  buf[MAXLINE];
    pid_t pid;
    int   status;

    printf("%% ");
    while (fgets(buf, MAXLINE, stdin) != NULL) {
        buf[strlen(buf) - 1] = '\0'; /* replace newline with null */
        
        if (( pid = fork() ) < 0) {
            err_sys("fork error");
        }
        else if ( pid == 0 ) { /* child process */
            if ( execlp(buf, buf, (char *) 0) == -1)
                err_ret("couldn't execute: %s", buf);
            exit(127);
        }

        /* parent */
        if ( ( pid = waitpid(pid, &status, 0) ) < 0)
            err_sys("waitpid error");

        printf("%% ");
    }

    if (ferror(stdin))
        err_sys("fgets error");

    exit(0);
}
}}}

fgets(3) は FILE 構造体のポインタから一気に1行読み込む為に用いる標準入出力関数である。

{{{
#!c
#include <stdio.h>
char *fgets(char *restrict s, int n, FILE *restrict stream);
}}}

Ctrl+D して EOF を渡すと fgets(3) は NULL を返すのでそれを while の終了条件としている。

    RETURN VALUES
         Upon successful completion, fgets() and gets() return a pointer to the string.
         If end-of-file occurs before any characters are read, they return NULL and the buffer contents remain unchanged.
         If an error occurs, they return NULL and the buffer contents are indeterminate.
         The fgets() and gets() functions do not distinguish between end-of-file and error; 
         callers must use feof(3) and ferror(3) to determine which occurred.

厳密には NULL ポインタが返ってきた場合は getc(3) でやったように ferror(3) で検査するべきなので、ここでは遭えて付け加えてみた。

execlp(3) に渡す文字列として、改行で終わる文字列を渡してはいけないので、strlen(3) で文字列の長さ (sizeof だと null 終端まで計算してしまう点との違いに注意) を求めて、
その要素を null 文字で置き換える。

次に fork(2) は、

{{{
#!c
#include <unistd.h>
pid_t fork(void);
}}}

で、man 2 fork より

    RETURN VALUES
         Upon successful completion, fork() returns a value of 0 to the child process and returns the process ID of the child process to the parent process.
         Otherwise, a value of -1 is returned to the parent process, no child process is created, 
         and the global variable errno is set to indicate the error.

とあるので、

 1. pid_t が -1 の場合はエラーと見なす
 2. pid_t が 0 を返すプロセスは新しく作られた子プロセスである
 3. pid_t が正数の場合はこの pid_t は新たに作られた子プロセスのプロセスIDで、そこは親プロセスである

と言う風に取り扱う。

fork(2) に続けた exec(3) の組み合わせを別の OS では新規プロセスの '''spawn''' と言う。

execlp(3) の定義は以下になる。

{{{
#!c
#include <unistd.h>
int execlp(const char *file, const char *arg0, ... /*, (char *)0 */);
}}}

この関数は、コマンド, 引数1, 引数2, ... と指定出来るが、va_list の終端を知らせる為に null ポインターを最後に指定する必要がある。
この例では引数の解析を行っていないので、引数付きのコマンド実行が出来ないようになっている。

最後に waitpid(2) だが、

{{{
#!c
#include <unistd.h>
pid_t waitpid(pid_t pid, int *stat_loc, int options);
}}}

という定義である。

waitpid(2) は子プロセスの終了を待つが、子プロセスがどのように終了したかは stat_loc に記載される。この例では使っていないが、sys/wait.h で提供されているマクロによって検査する事が出来る。options では WNOHANG (子プロセスの終了までブロックさせない) 等のオプションを論理和で指定する。この例では何も指定していない。

== 1.6 ANSI C の特徴 ==

 関数プロトタイプ::
   read(2), write(2), getpid(2) などのシステムコールの関数プロトタイプは unistd.h に含まれている。

 汎用 (void) ポインタ::
   read(2), write(2) 等のバッファの指定は char * ではなく void * となっている。

これによって、適当なデータ型をそのバッファに指定する事が出来る。
システムのバイトオーダーの違いに留意すべきだが、この事実はC言語で取り扱えるデータ型をそのままファイル等に書き出したり読み出したり出来ると言った利点がある。

また void ポインタが引数になっている場合は明示的なキャスト (void *) data のような事は必要なく、さらに void ポインタが戻り値の場合も、特にキャストして受け取る必要は無い。

 基本的なシステムデータ型::
   _t (size_t, ssize_t, pid_t 等) で終わるデータ型を基本的なシステムデータ型と呼ぶ。
   これらは sys/types.h で定義される。

 * read(3), write(3) の戻り値は ssize_t
   * 一方で第三引数は size_t で無ければならない
 * プロセスIDを取り扱う場合は pid_t で無ければならない

== 1.7 エラー処理 ==

 * man 2 intro で全てのエラーコードが記載されているのが普通。
 * errno は extern int errno として POSIX で定義されている。
 * errno.h でエラーコードが定数として定義されている。

エラーメッセージを出力する為の関数は以下のような物がある。

{{{
#!c
#include <string.h>
char *strerror(int errnum);
}}}

strerror(3) はエラーコードを指定して対応するメッセージを返す。

{{{
#!c
#include <stdio.h>
void perror(const char *s);
}}}

perror(3) は現在の errno の値を基にして、エラーメッセージを標準エラー出力に出力して戻る。

「プログラム1.6 strerror と perror の使い方」を [https://github.com/zigorou/apue/blob/master/1/testerror.c 1/testerror.c] に示す。

{{{
#!c
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char **argv) {
    fprintf(stderr, "EACCES: %s\n", strerror(EACCES));

    errno = ENOENT;
    perror(argv[0]);

    exit(0);
}
}}}

== 1.8 ユーザー識別 ==

ユーザーIDとグループIDについてだが特に説明する必要は無いと思われるのでコードのみで。

{{{
#include <unistd.h>
uid_t getuid(void);
gid_t getgid(void);
}}}

{{{
#!c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main(void) {
    printf("uid = %d, gid = %d\n", getuid(), getgid());
    exit(0);
}
}}}

== 1.9 シグナル ==

シグナルの処理の仕方は次の通りである。

 1. 無視する
   * ただし、0除算(SIGFPE)や、プロセスのアドレス空間外への参照(SIGSEGV)などは無視すべきではない
 2. デフォルトの処理に任せる
 3. シグナル発生時に呼び出される関数を与えておく

SIGINT は割り込みキー (DELETE, Ctrl+C, Ctrl-\) などで発生させる。あるいは kill(2), kill(1) コマンド等でもプロセスに任意のシグナルを送る事が出来る。
この場合はプロセスの所有者でないと送る事が出来ない。

「プログラム1.8 標準入力からコマンドを読み込み実行する」を [https://github.com/zigorou/apue/blob/master/1/shell2.c 1/shell2.c] に示す。

{{{
#!c
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <unistd.h>

#include "error.h"

#define MAXLINE 4096

static void sig_int(int);

int main(void) {
    char  buf[MAXLINE];
    pid_t pid;
    int   status;

    if (signal(SIGINT, sig_int) == SIG_ERR)
        err_sys("signal error");

    printf("%% ");
    while (fgets(buf, MAXLINE, stdin) != NULL) {
        buf[strlen(buf) - 1] = '\0'; /* replace newline with null */
        
        if (( pid = fork() ) < 0) {
            err_sys("fork error");
        }
        else if ( pid == 0 ) { /* child process */
            if ( execlp(buf, buf, (char *) 0) == -1)
                err_ret("couldn't execute: %s", buf);
            exit(127);
        }

        /* parent */
        if ( ( pid = waitpid(pid, &status, 0) ) < 0)
            err_sys("waitpid error");

        printf("%% ");
    }

    if (ferror(stdin))
        err_sys("fgets error");

    exit(0);
}

void sig_int(int signo) {
    printf("interrupt\n%% ");
}
}}}

man 3 signal してみると、定義は次のようになる。(ちなみに CentOS でやったら、セクション2になってた)

{{{
#!c
#include <signal.h>
typedef void (*sig_t) (int);
sig_t signal(int sig, sig_t func);
}}}

関数ポインタが上手く読めない場合は、最終的に定義した sig_int 関数とこの typedef 宣言(最終的に sig_t という型を宣言している)を見比べれば理解出来る。

== 1.10 UNIX の時計 ==

 1. カレンダー時間
   * いわゆる UNIX TIMESTAMP で UTC からの経過秒。time_t で表される。
 2. プロセス時間
   * CPU 時間とも言われる
   * プロセスが使用した CPU 資源を測定した物
   * クロック刻みで測定されたもの
     * 50, 60, 100(clocks/sec) のいずれか (POSIX では CLK_TCK 定数で提供されるが、現在この定数は使われていない)
   * clock_t でこの時間が表される
   * 実時間 (wall clock time), ユーザーCPU時間、システムCPU時間がある
     * 実時間はプロセスの実行に要した経過時間 (ほかのプロセスに影響を受ける)
     * ユーザーCPU時間はユーザーの操作に割り当てられたCPU時間
     * システムCPU時間はカーネルの活動に割り当てられたCPU時間

== 1.11 システムコールとライブラリ関数 ==

 * 使う側からは同じCの関数であると見なせる
 * ライブラリ関数は書き換え可能であるが、システムコールは不可能
 * printf(3) <-> write(2)
 * malloc(3) <-> sbrk(2)

== 1.13 演習問題 ==

巻末参照